<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--
    &lt;!&ndash; 使用 XML 进行自动化扫描配置 &ndash;&gt;
    <context:component-scan base-package="top.aidan.ioc.service" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>

    <bean class="top.aidan.ioc.model.User" id="user">
        <constructor-arg name="id" value="1"/>
        <constructor-arg name="username" value="Aidan"/>
        <constructor-arg name="address" value="aidanblog.top"/>
    </bean>

    &lt;!&ndash; 最常用 &ndash;&gt;
    <bean class="top.aidan.ioc.model.User" id="user2">
        <property name="id" value="2"/>
        <property name="username" value="Edward"/>
        <property name="address" value="aidan.top"/>
    </bean>

    <bean class="top.aidan.ioc.model.User" id="user3" p:id="3" p:username="Jack" p:address="jack.top"/>
    &lt;!&ndash; 工厂方法 &ndash;&gt;
    <bean class="top.aidan.ioc.OkHttpStaticFactory" factory-method="getInstance" id="okHttpClient"/>
    &lt;!&ndash; 实例方法 &ndash;&gt;
    <bean class="top.aidan.ioc.OkHttpFactory" id="okHttpFactory"/>
    <bean class="okhttp3.OkHttpClient" factory-bean="okHttpFactory" factory-method="getInstance" id="okHttpClient2"/>

    &lt;!&ndash;  对象注入可以提前创建对象，通过 ref 属性进行注入，也可以直接在属性中定义 &ndash;&gt;
    <bean class="top.aidan.ioc.model.Cat" id="cat">
        <property name="name" value="DaJu"/>
        <property name="age" value="3"/>
    </bean>

    <bean class="top.aidan.ioc.model.User" id="user4">
        <property name="id" value="4"/>
        <property name="username" value="Aidan"/>
        <property name="address" value="aidanblog.top"/>
        <property name="cat" ref="cat"/>
        <property name="cats">
            &lt;!&ndash; 数组根据其类型进行定义 &ndash;&gt;
            <array>
                &lt;!&ndash; 先定义后直接引用 &ndash;&gt;
                <ref bean="cat"/>
                &lt;!&ndash; 直接在数组中定义 &ndash;&gt;
                <bean class="top.aidan.ioc.model.Cat" id="cat2">
                    <property name="name" value="XiaoJu"/>
                    <property name="age" value="3"/>
                </bean>
            </array>
        </property>
        <property name="favorites">
            &lt;!&ndash; 集合直接根据泛型指定定义值 &ndash;&gt;
            <list>
                <value>足球</value>
                <value>篮球</value>
            </list>
        </property>
        <property name="details">
            &lt;!&ndash; Map 使用<map>标签加<entry>的方式进 行注入 &ndash;&gt;
            <map>
                <entry key="gender" value="female"/>
                <entry key="tel" value="184XXXX"/>
            </map>
        </property>
        <property name="info">
            &lt;!&ndash; properties 本质是多组键值对，使用<props> + <prop> 的方式 &ndash;&gt;
            <props>
                <prop key="WeChat">123XXXX</prop>
                <prop key="QQ">123XXXX</prop>
            </props>
        </property>
    </bean>
    -->

    <bean class="top.aidan.aop.LogAspectXML" name="logAspectXML"/>
    <bean class="top.aidan.aop.service.MyCalculatorImpl" id="myCalculator"/>
    <aop:config>
        <!-- 定义切点 -->
        <aop:pointcut id="pointCut" expression="execution(* top.aidan.aop.service.*.*(..))"/>
        <!-- 定义切面 -->
        <aop:aspect ref="logAspectXML">
            <aop:before method="before" pointcut-ref="pointCut"/>
            <aop:after method="after" pointcut-ref="pointCut"/>
            <aop:after-returning method="returning" pointcut-ref="pointCut" returning="r"/>
            <aop:after-throwing method="afterThrowing" pointcut-ref="pointCut" throwing="e"/>
            <aop:around method="around" pointcut-ref="pointCut"/>
        </aop:aspect>
    </aop:config>

</beans>