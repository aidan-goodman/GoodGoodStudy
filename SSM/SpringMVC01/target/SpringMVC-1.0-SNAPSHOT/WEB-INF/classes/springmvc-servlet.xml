<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 使用自动扫描的方式对 Controller 的注解进行扫描，无需手动配置 -->
    <context:component-scan base-package="top.aidan" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- ================================= SpringMVC 配置实践 ======================================= -->
    <!--入门实践
    &lt;!&ndash;  配置 MyController 实例  &ndash;&gt;
    &lt;!&ndash;  <bean class="top.aidan.controller.MyController" name="/hello"/>  &ndash;&gt;

    &lt;!&ndash; 配置处理器映射器，将前端请求和后段的接口关联起来 &ndash;&gt;
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" id="handlerMapping">
        <property name="beanName" value="/hello"/>
    </bean>&ndash;&gt;

    &lt;!&ndash; 处理器适配器 &ndash;&gt;
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" id="handlerAdapter"/>

    &lt;!&ndash;  视图解析器  &ndash;&gt;
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="viewResolver">
        <property name="prefix" value="/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>     -->


    <!-- 最佳实践 -->
    <!-- 配置处理器映射器和适配器
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"
          id="handlerMapping"/>
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"
          id="handlerAdapter"/>     -->
    <!-- 相当于替代上方的处理器配置 -->
    <mvc:annotation-driven conversion-service="conversionService"/>
    <!-- 视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="viewResolver">
        <property name="prefix" value="/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 配置静态资源 -->
    <mvc:resources mapping="/**" location="/"/>

    <!-- ============================ 使用 SpringMVC 进行文件上传 ================================= -->
    <!--    使用 CommonsMultipartResolver 的方式进行文件上传
    <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
        &lt;!&ndash; 默认的编码 &ndash;&gt;
        <property name="defaultEncoding" value="UTF-8"/>
        &lt;!&ndash; 上传的总文件大小 &ndash;&gt;
        <property name="maxUploadSize" value="1048576"/>
        &lt;!&ndash; 上传的单个文件大小 &ndash;&gt;
        <property name="maxUploadSizePerFile" value="1048576"/>
        &lt;!&ndash; 内存中最大的数据量，超过这个数据量，数据就要开始往硬盘中写了 &ndash;&gt;
        <property name="maxInMemorySize" value="4096"/>
        &lt;!&ndash; 临时目录，超过 maxInMemorySize 配置的大小后，数据开始往临时目录写，等全部上传完成后，再将数据合并到正式的文件上传目录 &ndash;&gt;
        <property name="uploadTempDir" value="file:///E:\\tmp"/>
    </bean>     -->

    <!--  使用 StandardServletMultipartResolver 的方式进行文件上传  -->
    <bean class="org.springframework.web.multipart.support.StandardServletMultipartResolver" id="multipartResolver">
    </bean>

    <!-- ============= 使用 FormattingConversionServiceFactoryBean 对自定义参数进行转换 ============= -->
    <bean class="org.springframework.format.support.FormattingConversionServiceFactoryBean" id="conversionService">
        <property name="converters">
            <set>
                <ref bean="myDateConverter"/>
            </set>
        </property>
    </bean>

</beans>